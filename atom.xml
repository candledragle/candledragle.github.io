<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>盛艳明的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-17T01:28:47.671Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>盛艳明</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>淘宝Atlas源码解析（一）</title>
    <link href="http://yoursite.com/2018/03/17/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/03/17/源码解析（一）/</id>
    <published>2018-03-17T01:22:02.000Z</published>
    <updated>2018-03-17T01:28:47.671Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/loveBuZhiDao/article/details/79578307" target="_blank" rel="external">我的csdn博客地址</a></p>
<p><strong>简述：这篇文章仅仅介绍atlas的基本实现原理</strong>。</p>
<p><img src="https://alibaba.github.io/atlas/code_read/atlas_bundle_load/bundle_load_img.svg" alt="这里写图片描述"></p>
<p>这是atals中bundle加载过程包括class 和 resource</p>
<p>第15步:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">if(!installingBundles.containsKey(location) &amp;&amp; ((bundleDir!=null&amp;&amp;bundleDir.exists()) || dexPatchDir!=null&amp;&amp;dexPatchDir.exists()))&#123;</div><div class="line">         try &#123;</div><div class="line">             BundleContext bcontext = new BundleContext();</div><div class="line">             bcontext.bundle_tag = bundleUniqueTag;</div><div class="line">             bcontext.location = location;</div><div class="line">             bcontext.bundleDir = bundleDir;</div><div class="line">             bcontext.dexPatchDir = dexPatchDir;</div><div class="line">             bundle = new BundleImpl(bcontext);</div><div class="line">             if (bundle != null) &#123;</div><div class="line">                 bundle.optDexFile();</div><div class="line">             &#125;</div><div class="line">         &#125; catch (Exception e) &#123;</div><div class="line">             if (e instanceof BundleArchive.MisMatchException) &#123;</div><div class="line">                 if (bundleDir.exists()) &#123;</div><div class="line">                     bundle = null;</div><div class="line">                 &#125;</div><div class="line">             &#125;</div></pre></td></tr></table></figure>
<p>可以看到bundle.optDexFile() 点进去看看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public /*synchronized*/ void optDexFile() &#123;</div><div class="line">//getArchive（）获取bundle压缩文件的描述返回的是BundleArchive对象</div><div class="line">//调用BundleArchive的optDexFile()方法</div><div class="line">    this.getArchive().optDexFile();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public void optDexFile() &#123;</div><div class="line">//BundleArchive 对象仅仅是对 BundleArchiveRevision的一层封装</div><div class="line">//BundleArchiveRevision才是对Bundle的so文件的真正描述</div><div class="line">//currentRevision 是BundleArchive 的实例指当前Bundle压缩文件对象</div><div class="line">	currentRevision.optDexFile();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public /*synchronized*/ void optDexFile() &#123;</div><div class="line"></div><div class="line">    if (isDexOpted())&#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    optDexFileLocked();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着点入optDexFileLocked()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">关键代码 Build.VERSION.SDK_INT&gt;=21</div><div class="line"> dexFile = (DexFile) RuntimeVariables.sDexLoadBooster.getClass().getDeclaredMethod(&quot;loadDex&quot;,Context.class,String.class, String.class, int.class, boolean.class).invoke(</div><div class="line">                        RuntimeVariables.sDexLoadBooster,</div><div class="line">                        RuntimeVariables.androidApplication,</div><div class="line">                        bundleFile.getAbsolutePath(),</div><div class="line">                        odexFile.getAbsolutePath(),</div><div class="line">                        0,</div><div class="line">                        interpretOnly);</div></pre></td></tr></table></figure>
<p>RuntimeVariables.sDexLoadBooster 是DexLoadBooster() 对象，是在AtlasBridgeApplication 中初始化，在BridgeApplicationDelegate 中赋值给RuntimeVariables.sDexLoadBooster 的。<br>所以这段反射代码最终执行的方法是DexLoadBooster()的loadDex 方法 代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public DexFile loadDex(Context context, String sourcePathName, String outputPathName, int flags,</div><div class="line">                       boolean interpretOnly) throws IOException &#123;</div><div class="line">    return AndroidRuntime.getInstance().loadDex(context, sourcePathName, outputPathName, flags, interpretOnly);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DexFile.loadDex(sourcePathName, outputPathName, flags)</div></pre></td></tr></table></figure>
<p>这就是Android代码加载Dex文件的代码了</p>
<p>现在已经将dex文件加载到内存中封装成对象了，接着查BundleClassLoader的代码，这个流程是class文件的加载过程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clazz = ((BundleClassLoader)impl.getClassLoader()).loadOwnClass(classname);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public Class&lt;?&gt; loadOwnClass(String className) throws ClassNotFoundException &#123;</div><div class="line">     Class&lt;?&gt; clazz = findLoadedClass(className);</div><div class="line"></div><div class="line">     if (clazz == null) &#123;</div><div class="line">         clazz = findOwnClass(className);</div><div class="line">     &#125;</div><div class="line">     return clazz;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private Class&lt;?&gt; findOwnClass(final String classname) &#123;</div><div class="line">    try &#123;</div><div class="line">        Class&lt;?&gt; clazz = archive.findClass(classname, this);</div><div class="line">        return clazz;</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        if (e instanceof BundleArchiveRevision.DexLoadException) &#123;</div><div class="line">            throw (BundleArchiveRevision.DexLoadException)e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public Class&lt;?&gt; findClass(String className, ClassLoader cl) throws ClassNotFoundException &#123;</div><div class="line">    return currentRevision.findClass(className, cl);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clazz = dexFile.loadClass(className, cl);</div></pre></td></tr></table></figure>
<p>到这里我们的上面拿到的DexFile对象用上了，并且调用了loadClass方法<br>查看loadClass方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public Class loadClass(String name, ClassLoader loader) &#123;</div><div class="line">    String slashName = name.replace(&apos;.&apos;, &apos;/&apos;);</div><div class="line">    return loadClassBinaryName(slashName, loader);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>点入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public Class loadClassBinaryName(String name, ClassLoader loader) &#123;</div><div class="line">    return defineClass(name, loader, mCookie);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>点入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private native static Class defineClass(String name, ClassLoader loader, int cookie);</div></pre></td></tr></table></figure>
<p>发现这是一个native方法，到此结束<br>总结：Atlas 通过反射为每个Bundle创建了一个ClassLoader ，将so文件中的dex文件加载到内存中以后最终调用defineClass方法加载class文件。</p>
<p>附属DexFile源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div></pre></td><td class="code"><pre><div class="line">package dalvik.system;</div><div class="line">import java.io.File;</div><div class="line">import java.io.FileNotFoundException;</div><div class="line">import java.io.IOException;</div><div class="line">import java.util.Enumeration;</div><div class="line">/**</div><div class="line"> * Manipulates DEX files. The class is similar in principle to</div><div class="line"> * &#123;@link java.util.zip.ZipFile&#125;. It is used primarily by class loaders.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * Note we don&apos;t directly open and read the DEX file here. They&apos;re memory-mapped</div><div class="line"> * read-only by the VM.</div><div class="line"> */</div><div class="line">public final class DexFile &#123;</div><div class="line">    private int mCookie;</div><div class="line">    private final String mFileName;</div><div class="line">    private final CloseGuard guard = CloseGuard.get();</div><div class="line">    /**</div><div class="line">     * Opens a DEX file from a given File object. This will usually be a ZIP/JAR</div><div class="line">     * file with a &quot;classes.dex&quot; inside.</div><div class="line">     *</div><div class="line">     * The VM will generate the name of the corresponding file in</div><div class="line">     * /data/dalvik-cache and open it, possibly creating or updating</div><div class="line">     * it first if system permissions allow.  Don&apos;t pass in the name of</div><div class="line">     * a file in /data/dalvik-cache, as the named file is expected to be</div><div class="line">     * in its original (pre-dexopt) state.</div><div class="line">     *</div><div class="line">     * @param file</div><div class="line">     *            the File object referencing the actual DEX file</div><div class="line">     *</div><div class="line">     * @throws IOException</div><div class="line">     *             if an I/O error occurs, such as the file not being found or</div><div class="line">     *             access rights missing for opening it</div><div class="line">     */</div><div class="line">    public DexFile(File file) throws IOException &#123;</div><div class="line">        this(file.getPath());</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * Opens a DEX file from a given filename. This will usually be a ZIP/JAR</div><div class="line">     * file with a &quot;classes.dex&quot; inside.</div><div class="line">     *</div><div class="line">     * The VM will generate the name of the corresponding file in</div><div class="line">     * /data/dalvik-cache and open it, possibly creating or updating</div><div class="line">     * it first if system permissions allow.  Don&apos;t pass in the name of</div><div class="line">     * a file in /data/dalvik-cache, as the named file is expected to be</div><div class="line">     * in its original (pre-dexopt) state.</div><div class="line">     *</div><div class="line">     * @param fileName</div><div class="line">     *            the filename of the DEX file</div><div class="line">     *</div><div class="line">     * @throws IOException</div><div class="line">     *             if an I/O error occurs, such as the file not being found or</div><div class="line">     *             access rights missing for opening it</div><div class="line">     */</div><div class="line">    public DexFile(String fileName) throws IOException &#123;</div><div class="line">        mCookie = openDexFile(fileName, null, 0);</div><div class="line">        mFileName = fileName;</div><div class="line">        guard.open(&quot;close&quot;);</div><div class="line">        //System.out.println(&quot;DEX FILE cookie is &quot; + mCookie);</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * Opens a DEX file from a given filename, using a specified file</div><div class="line">     * to hold the optimized data.</div><div class="line">     *</div><div class="line">     * @param sourceName</div><div class="line">     *  Jar or APK file with &quot;classes.dex&quot;.</div><div class="line">     * @param outputName</div><div class="line">     *  File that will hold the optimized form of the DEX data.</div><div class="line">     * @param flags</div><div class="line">     *  Enable optional features.</div><div class="line">     */</div><div class="line">    private DexFile(String sourceName, String outputName, int flags) throws IOException &#123;</div><div class="line">        mCookie = openDexFile(sourceName, outputName, flags);</div><div class="line">        mFileName = sourceName;</div><div class="line">        guard.open(&quot;close&quot;);</div><div class="line">        //System.out.println(&quot;DEX FILE cookie is &quot; + mCookie);</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * Open a DEX file, specifying the file in which the optimized DEX</div><div class="line">     * data should be written.  If the optimized form exists and appears</div><div class="line">     * to be current, it will be used; if not, the VM will attempt to</div><div class="line">     * regenerate it.</div><div class="line">     *</div><div class="line">     * This is intended for use by applications that wish to download</div><div class="line">     * and execute DEX files outside the usual application installation</div><div class="line">     * mechanism.  This function should not be called directly by an</div><div class="line">     * application; instead, use a class loader such as</div><div class="line">     * dalvik.system.DexClassLoader.</div><div class="line">     *</div><div class="line">     * @param sourcePathName</div><div class="line">     *  Jar or APK file with &quot;classes.dex&quot;.  (May expand this to include</div><div class="line">     *  &quot;raw DEX&quot; in the future.)</div><div class="line">     * @param outputPathName</div><div class="line">     *  File that will hold the optimized form of the DEX data.</div><div class="line">     * @param flags</div><div class="line">     *  Enable optional features.  (Currently none defined.)</div><div class="line">     * @return</div><div class="line">     *  A new or previously-opened DexFile.</div><div class="line">     * @throws IOException</div><div class="line">     *  If unable to open the source or output file.</div><div class="line">     */</div><div class="line">    static public DexFile loadDex(String sourcePathName, String outputPathName,</div><div class="line">        int flags) throws IOException &#123;</div><div class="line">        /*</div><div class="line">         * TODO: we may want to cache previously-opened DexFile objects.</div><div class="line">         * The cache would be synchronized with close().  This would help</div><div class="line">         * us avoid mapping the same DEX more than once when an app</div><div class="line">         * decided to open it multiple times.  In practice this may not</div><div class="line">         * be a real issue.</div><div class="line">         */</div><div class="line">        return new DexFile(sourcePathName, outputPathName, flags);</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * Gets the name of the (already opened) DEX file.</div><div class="line">     *</div><div class="line">     * @return the file name</div><div class="line">     */</div><div class="line">    public String getName() &#123;</div><div class="line">        return mFileName;</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * Closes the DEX file.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * This may not be able to release any resources. If classes from this</div><div class="line">     * DEX file are still resident, the DEX file can&apos;t be unmapped.</div><div class="line">     *</div><div class="line">     * @throws IOException</div><div class="line">     *             if an I/O error occurs during closing the file, which</div><div class="line">     *             normally should not happen</div><div class="line">     */</div><div class="line">    public void close() throws IOException &#123;</div><div class="line">        guard.close();</div><div class="line">        closeDexFile(mCookie);</div><div class="line">        mCookie = 0;</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * Loads a class. Returns the class on success, or a &#123;@code null&#125; reference</div><div class="line">     * on failure.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * If you are not calling this from a class loader, this is most likely not</div><div class="line">     * going to do what you want. Use &#123;@link Class#forName(String)&#125; instead.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * The method does not throw &#123;@link ClassNotFoundException&#125; if the class</div><div class="line">     * isn&apos;t found because it isn&apos;t reasonable to throw exceptions wildly every</div><div class="line">     * time a class is not found in the first DEX file we look at.</div><div class="line">     *</div><div class="line">     * @param name</div><div class="line">     *            the class name, which should look like &quot;java/lang/String&quot;</div><div class="line">     *</div><div class="line">     * @param loader</div><div class="line">     *            the class loader that tries to load the class (in most cases</div><div class="line">     *            the caller of the method</div><div class="line">     *</div><div class="line">     * @return the &#123;@link Class&#125; object representing the class, or &#123;@code null&#125;</div><div class="line">     *         if the class cannot be loaded</div><div class="line">     */</div><div class="line">    public Class loadClass(String name, ClassLoader loader) &#123;</div><div class="line">        String slashName = name.replace(&apos;.&apos;, &apos;/&apos;);</div><div class="line">        return loadClassBinaryName(slashName, loader);</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * See &#123;@link #loadClass(String, ClassLoader)&#125;.</div><div class="line">     *</div><div class="line">     * This takes a &quot;binary&quot; class name to better match ClassLoader semantics.</div><div class="line">     *</div><div class="line">     * @hide</div><div class="line">     */</div><div class="line">    public Class loadClassBinaryName(String name, ClassLoader loader) &#123;</div><div class="line">        return defineClass(name, loader, mCookie);</div><div class="line">    &#125;</div><div class="line">    private native static Class defineClass(String name, ClassLoader loader, int cookie);</div><div class="line">    /**</div><div class="line">     * Enumerate the names of the classes in this DEX file.</div><div class="line">     *</div><div class="line">     * @return an enumeration of names of classes contained in the DEX file, in</div><div class="line">     *         the usual internal form (like &quot;java/lang/String&quot;).</div><div class="line">     */</div><div class="line">    public Enumeration&lt;String&gt; entries() &#123;</div><div class="line">        return new DFEnum(this);</div><div class="line">    &#125;</div><div class="line">    /*</div><div class="line">     * Helper class.</div><div class="line">     */</div><div class="line">    private class DFEnum implements Enumeration&lt;String&gt; &#123;</div><div class="line">        private int mIndex;</div><div class="line">        private String[] mNameList;</div><div class="line">        DFEnum(DexFile df) &#123;</div><div class="line">            mIndex = 0;</div><div class="line">            mNameList = getClassNameList(mCookie);</div><div class="line">        &#125;</div><div class="line">        public boolean hasMoreElements() &#123;</div><div class="line">            return (mIndex &lt; mNameList.length);</div><div class="line">        &#125;</div><div class="line">        public String nextElement() &#123;</div><div class="line">            return mNameList[mIndex++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    /* return a String array with class names */</div><div class="line">    native private static String[] getClassNameList(int cookie);</div><div class="line">    /**</div><div class="line">     * Called when the class is finalized. Makes sure the DEX file is closed.</div><div class="line">     *</div><div class="line">     * @throws IOException</div><div class="line">     *             if an I/O error occurs during closing the file, which</div><div class="line">     *             normally should not happen</div><div class="line">     */</div><div class="line">    @Override protected void finalize() throws Throwable &#123;</div><div class="line">        try &#123;</div><div class="line">            if (guard != null) &#123;</div><div class="line">                guard.warnIfOpen();</div><div class="line">            &#125;</div><div class="line">            close();</div><div class="line">        &#125; finally &#123;</div><div class="line">            super.finalize();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    /*</div><div class="line">     * Open a DEX file.  The value returned is a magic VM cookie.  On</div><div class="line">     * failure, an IOException is thrown.</div><div class="line">     */</div><div class="line">    native private static int openDexFile(String sourceName, String outputName,</div><div class="line">        int flags) throws IOException;</div><div class="line">    /*</div><div class="line">     * Open a DEX file based on a &#123;@code byte[]&#125;. The value returned</div><div class="line">     * is a magic VM cookie. On failure, a RuntimeException is thrown.</div><div class="line">     */</div><div class="line">    native private static int openDexFile(byte[] fileContents);</div><div class="line">    /*</div><div class="line">     * Close DEX file.</div><div class="line">     */</div><div class="line">    native private static void closeDexFile(int cookie);</div><div class="line">    /**</div><div class="line">     * Returns true if the VM believes that the apk/jar file is out of date</div><div class="line">     * and should be passed through &quot;dexopt&quot; again.</div><div class="line">     *</div><div class="line">     * @param fileName the absolute path to the apk/jar file to examine.</div><div class="line">     * @return true if dexopt should be called on the file, false otherwise.</div><div class="line">     * @throws java.io.FileNotFoundException if fileName is not readable,</div><div class="line">     *         not a file, or not present.</div><div class="line">     * @throws java.io.IOException if fileName is not a valid apk/jar file or</div><div class="line">     *         if problems occur while parsing it.</div><div class="line">     * @throws java.lang.NullPointerException if fileName is null.</div><div class="line">     * @throws dalvik.system.StaleDexCacheError if the optimized dex file</div><div class="line">     *         is stale but exists on a read-only partition.</div><div class="line">     */</div><div class="line">    native public static boolean isDexOptNeeded(String fileName)</div><div class="line">            throws FileNotFoundException, IOException;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/loveBuZhiDao/article/details/79578307&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的csdn博客地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简述：这篇文章
    
    </summary>
    
    
      <category term="alibaba、atlas" scheme="http://yoursite.com/tags/alibaba%E3%80%81atlas/"/>
    
  </entry>
  
  <entry>
    <title>c语言生成动态链接库复习</title>
    <link href="http://yoursite.com/2017/12/16/c%E8%AF%AD%E8%A8%80%E7%94%9F%E6%88%90%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E5%A4%8D%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/12/16/c语言生成动态链接库复习/</id>
    <published>2017-12-16T03:01:51.000Z</published>
    <updated>2017-12-16T03:09:02.930Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>命令实例：生成动态链接库</p>
</blockquote>
<pre><code>gcc test_a.c test_b.c test_c.c -fPIC -shared -o libtest.so
</code></pre><blockquote>
<p>使用动态链接库</p>
</blockquote>
<pre><code>gcc test.c -L. -ltest -o test    
</code></pre><blockquote>
<p>测试是否动态链接</p>
</blockquote>
<pre><code>otool test
</code></pre><p>–</p>
<pre><code>1、编译参数解析
最主要的是GCC命令行的一个选项:
-shared 该选项指定生成动态连接库（让连接器生成T类型的导出符号表，有时候也生成弱连接W类型的导
出符号），不用该标志外部程序无法连接。相当于一个可执行文件
l -fPIC：表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时是通
过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码段共享的目的。
l -L.：表示要连接的库在当前目录中
l -ltest：编译器查找动态连接库时有隐含的命名规则，即在给出的名字前面加上lib，后面加上.so来确
定库的名称
l LD_LIBRARY_PATH：这个环境变量指示动态连接器可以装载动态库的路径。
l 当然如果有root权限的话，可以修改/etc/ld.so.conf文件，然后调用 /sbin/ldconfig来达到同样的目
的，不过如果没有root权限，那么只能采用输出LD_LIBRARY_PATH的方法了。

2、注意
调用动态库的时候有几个问题会经常碰到，有时，明明已经将库的头文件所在目录 通过 “-I” include
进来了，库所在文件通过 “-L”参数引导，并指定了“-l”的库名，但通过ldd命令察看时，就是死活找
不到你指定链接的so文件，这时你要作的就是通过修改 LD_LIBRARY_PATH或者/etc/ld.so.conf文件来指
定动态库的目录。通常这样做就可以解决库无法链接的问题了。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;命令实例：生成动态链接库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;gcc test_a.c test_b.c test_c.c -fPIC -shared -o libtest.so
&lt;/code&gt;&lt;/pre&gt;&lt;blockquot
    
    </summary>
    
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>巩固java中Collections中sort方法的用法</title>
    <link href="http://yoursite.com/2017/12/09/%E5%B7%A9%E5%9B%BAjava%E4%B8%ADCollections%E4%B8%ADsort%E6%96%B9%E6%B3%95%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2017/12/09/巩固java中Collections中sort方法的用法/</id>
    <published>2017-12-09T08:29:10.000Z</published>
    <updated>2017-12-09T08:37:39.857Z</updated>
    
    <content type="html"><![CDATA[<p>###这里不讲原理了，有兴趣可以追踪java源码</p>
<p>测试用例一：</p>
<pre><code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
    list.add(1);
    list.add(3);
    list.add(4);
    list.add(2);
    list.add(7);
    list.add(6);

Collections.sort(list);
System.out.println(list)

结论：默认情况下Collections.sort是升序排序
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Comparator&lt;Integer&gt; comparable = new Comparator&lt;Integer&gt;() &#123;</div><div class="line"></div><div class="line"></div><div class="line">     @Override</div><div class="line">     public int compare(Integer l, Integer h) &#123;</div><div class="line">   </div><div class="line">         System.out.println(l+&quot; &quot;+h);</div><div class="line">         if(l &gt; h)&#123;</div><div class="line">             return -1;</div><div class="line">         &#125;else&#123;</div><div class="line">             return 1;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;;</div><div class="line"></div><div class="line"> ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</div><div class="line"> list.add(1);</div><div class="line"> list.add(3);</div><div class="line"> list.add(4);</div><div class="line"> list.add(2);</div><div class="line"> list.add(7);</div><div class="line"> list.add(6);</div><div class="line"></div><div class="line"> System.out.println(list);</div><div class="line"> sort(list,comparable);</div><div class="line"> System.out.println(list);</div></pre></td></tr></table></figure>
<hr>
<p> 打印结果</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[1, 3, 4, 2, 7, 6]</div><div class="line">3 1</div><div class="line">4 3</div><div class="line">2 4</div><div class="line">2 3</div><div class="line">2 1</div><div class="line">7 2</div><div class="line">7 3</div><div class="line">7 4</div><div class="line">6 3</div><div class="line">6 4</div><div class="line">6 7</div><div class="line">[7, 6, 4, 3, 2, 1]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###这里不讲原理了，有兴趣可以追踪java源码&lt;/p&gt;
&lt;p&gt;测试用例一：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ArrayList&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;Integer&amp;gt;();
    list.add(1);
  
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>“rsaauthentication”问题</title>
    <link href="http://yoursite.com/2017/11/30/%E2%80%9Crsaauthentication%E2%80%9D%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/11/30/“rsaauthentication”问题/</id>
    <published>2017-11-30T11:00:46.000Z</published>
    <updated>2017-11-30T11:00:46.582Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>checkout的单文件合并用法</title>
    <link href="http://yoursite.com/2017/11/30/checkout%E7%9A%84%E5%8D%95%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2017/11/30/checkout的单文件合并用法/</id>
    <published>2017-11-30T07:36:51.000Z</published>
    <updated>2017-11-30T10:39:36.070Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>问题描述</p>
</blockquote>
<pre><code>在我们开发过程中特别是分支比较多的时候会遇到一种场景就是需要
A分支上的某几个文件合并到另一个分支上比如f.java保持多个版本间
的代码同步，那么怎么办呢?git checkout的命令正好可以用上
</code></pre><blockquote>
<p>使用用例</p>
</blockquote>
<pre><code>git checkout A 切换到A分支
git checkout B f.java (将B分支上的f文件强行覆盖|copy到分支)
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;问题描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;在我们开发过程中特别是分支比较多的时候会遇到一种场景就是需要
A分支上的某几个文件合并到另一个分支上比如f.java保持多个版本间
的代码同步，那么怎么办呢?git checkou
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git分支合并经验总结</title>
    <link href="http://yoursite.com/2017/11/24/git%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/11/24/git分支合并经验总结/</id>
    <published>2017-11-24T08:59:43.000Z</published>
    <updated>2017-11-24T08:59:43.146Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>点滴积累c指针</title>
    <link href="http://yoursite.com/2017/11/23/%E7%82%B9%E6%BB%B4%E7%A7%AF%E7%B4%AFc%E6%8C%87%E9%92%88/"/>
    <id>http://yoursite.com/2017/11/23/点滴积累c指针/</id>
    <published>2017-11-23T00:40:22.000Z</published>
    <updated>2017-11-23T00:44:27.576Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pan.baidu.com/s/1i5pcF9j" target="_blank" rel="external">推荐的质料</a></p>
<pre><code>提取密码：6nh9
</code></pre><hr>
<h2 id="未完成待续"><a href="#未完成待续" class="headerlink" title=" 未完成待续"></a> 未完成待续</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1i5pcF9j&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;推荐的质料&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;提取密码：6nh9
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;未完
    
    </summary>
    
    
      <category term="c、c++" scheme="http://yoursite.com/tags/c%E3%80%81c/"/>
    
  </entry>
  
  <entry>
    <title>gdb学习笔记</title>
    <link href="http://yoursite.com/2017/11/22/gdb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/22/gdb学习笔记/</id>
    <published>2017-11-21T23:53:09.000Z</published>
    <updated>2017-11-22T00:12:19.720Z</updated>
    
    <content type="html"><![CDATA[<p>系统环境：mac</p>
<p>下载安装完gdb后第一步是添加证书否者会出现以下提示</p>
<pre><code>(please check gdb is codesigned - see taskgated(8))
</code></pre><p><a href="http://blog.afantree.com/unixlinux/gdb-prompt-signature-under-mac-error-please-check-gdb-is-codesigned-see-taskgated-8.html" target="_blank" rel="external">mac下添加证书连接</a></p>
<ol>
<li><p>编译生成可执行的文件（加上-g会生成可调试的文件）</p>
<pre><code>gcc -g test.c -o test

会多生成一个文件，这个文件在我电脑上的名字是.dSYM
//todo 查阅资料了解这个文件的作用
</code></pre></li>
</ol>
<p>常用命令：（注：使用enter| 空格键是重复上一个命令）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">l(list) :列出源码</div><div class="line"></div><div class="line">n(next) :单点调试(就是单条语句执行)</div><div class="line"></div><div class="line">p(print):输出你想打印的值</div><div class="line"></div><div class="line">break	 :打断点 例如 break 17表示把断点打在第17行</div><div class="line">info break :查看所有断点的信息</div><div class="line">bt: 查看函数的堆栈信息</div><div class="line">finish:退出函数</div><div class="line">c: 继续运行</div><div class="line">q: 退出gdb</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系统环境：mac&lt;/p&gt;
&lt;p&gt;下载安装完gdb后第一步是添加证书否者会出现以下提示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(please check gdb is codesigned - see taskgated(8))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;ht
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android爬坑记录</title>
    <link href="http://yoursite.com/2017/11/19/Android%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/11/19/Android爬坑记录/</id>
    <published>2017-11-19T03:21:30.000Z</published>
    <updated>2017-11-19T03:59:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发过程中遇到这么一个需求：<br>需要一个可折叠的列表并且在子列表中有EditText的输入和回显的交互</p>
<p>可折叠的列表很自然的就想到了google的原生控件ExpandableListView<br>但是知道为什么ExpanableListView好像并不怎么友好，在使用过程中发现好多不可思议的地方比如说getChildView会刷两次。好了闲话不多说，问题要逐一解决，先来谈谈解决ExpandListView和EditView的问题。</p>
<p>思路一：<br>为EditView设置内容监听</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">holder.label_et.addTextChangedListener(new TextWatcher() &#123;</div><div class="line">                @Override</div><div class="line">                public void beforeTextChanged(CharSequence s, int start, int count, int after) &#123;</div><div class="line">                    </div><div class="line">                &#125;</div><div class="line"></div><div class="line">                @Override</div><div class="line">                public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                @Override</div><div class="line">                public void afterTextChanged(Editable s) &#123;</div><div class="line">                    String text = holder.label_et.getText().toString();</div><div class="line">                    if(!TextUtils.isEmpty(text))&#123;</div><div class="line">                        item.setLable(text);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<p>发现问题很诡异，afterTextChanged 被执行了很多遍，最后失败告终。<br>看日志感觉解释不清楚就先不贴了，有时间研究下。</p>
<p>思路二：在EditText焦点发生变化的时候再获取文本内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">holder.label_et.setOnFocusChangeListener(new View.OnFocusChangeListener() &#123;</div><div class="line">               @Override</div><div class="line">               public void onFocusChange(View v, boolean hasFocus) &#123;</div><div class="line">                   if(!hasFocus)&#123;</div><div class="line">                       String text = holder.label_et.getText().toString();</div><div class="line">                       if(!TextUtils.isEmpty(text))&#123;</div><div class="line">                           item.setLable(text);</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;);</div></pre></td></tr></table></figure>
<p>完美解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发过程中遇到这么一个需求：&lt;br&gt;需要一个可折叠的列表并且在子列表中有EditText的输入和回显的交互&lt;/p&gt;
&lt;p&gt;可折叠的列表很自然的就想到了google的原生控件ExpandableListView&lt;br&gt;但是知道为什么ExpanableListView好像并不
    
    </summary>
    
    
      <category term="android、ExpandableListView、EditText" scheme="http://yoursite.com/tags/android%E3%80%81ExpandableListView%E3%80%81EditText/"/>
    
  </entry>
  
  <entry>
    <title>listView和RadioButton的故事</title>
    <link href="http://yoursite.com/2017/11/06/listView%E5%92%8CRadioButton%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://yoursite.com/2017/11/06/listView和RadioButton的故事/</id>
    <published>2017-11-06T12:57:49.000Z</published>
    <updated>2017-11-06T13:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述：<br>在xml布局中为RadioButton设置默认选中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;RadioGroup</div><div class="line">    android:id=&quot;@+id/rg&quot;</div><div class="line">    android:layout_width=&quot;0dp&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:layout_weight=&quot;60&quot;</div><div class="line">    android:orientation=&quot;horizontal&quot;</div><div class="line">    android:paddingLeft=&quot;20dp&quot;&gt;</div><div class="line"></div><div class="line">    &lt;RadioButton</div><div class="line">        android:id=&quot;@+id/yes_rb&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;是&quot;</div><div class="line">        android:textColor=&quot;@android:color/black&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;RadioButton</div><div class="line">        android:id=&quot;@+id/no_rb&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        android:layout_marginLeft=&quot;10dp&quot;</div><div class="line">        android:checked=&quot;true&quot;</div><div class="line">        android:text=&quot;否&quot;</div><div class="line">        android:textColor=&quot;@android:color/black&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/RadioGroup&gt;</div></pre></td></tr></table></figure></p>
<p>发现在ListView 初始化以后id 为no_rb的RadioButon无法取消掉，<br>原因不明。</p>
<p>解决办法：<br>在代码中设置默认选中，<br> RadioButton rb = (RadioButton) view.findViewById(R.id.no_rb);<br>        rb.setChecked(true);</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题描述：&lt;br&gt;在xml布局中为RadioButton设置默认选中&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div cl
    
    </summary>
    
    
      <category term="listView、RadioButton" scheme="http://yoursite.com/tags/listView%E3%80%81RadioButton/"/>
    
  </entry>
  
  <entry>
    <title>ListView和EditText解决方案</title>
    <link href="http://yoursite.com/2017/11/06/ListView%E5%92%8CEditText%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2017/11/06/ListView和EditText解决方案/</id>
    <published>2017-11-06T03:45:46.000Z</published>
    <updated>2017-11-06T03:49:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题：ListView 嵌套EditText, EditText无法获取焦点问题</p>
<p>关注点：android:descendantFocusability <a href="http://www.cnblogs.com/eyu8874521/archive/2012/10/17/2727882.html" target="_blank" rel="external">参考资料</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ListView</div><div class="line">     android:id=&quot;@+id/listView&quot;</div><div class="line">     android:descendantFocusability=&quot;afterDescendants&quot;</div><div class="line">     android:layout_width=&quot;match_parent&quot;</div><div class="line">     android:layout_height=&quot;match_parent&quot; /&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题：ListView 嵌套EditText, EditText无法获取焦点问题&lt;/p&gt;
&lt;p&gt;关注点：android:descendantFocusability &lt;a href=&quot;http://www.cnblogs.com/eyu8874521/archive/201
    
    </summary>
    
    
      <category term="listView、EditText" scheme="http://yoursite.com/tags/listView%E3%80%81EditText/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://yoursite.com/2017/10/27/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/10/27/Git常用命令/</id>
    <published>2017-10-27T10:57:53.000Z</published>
    <updated>2017-10-27T11:09:48.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>使用git fetch&amp;&amp;git merge origin/master 代替git pull master</li>
<li>查看local 分支与对应的远程分支的差异：git diff master origin/master</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;使用git fetch&amp;amp;&amp;amp;git merge origin/master 代替git pull master&lt;/li&gt;
&lt;li&gt;查看local 分支与对应的远程分支的差异：git diff master origin/master&lt;/li&gt;
&lt;/
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git问题记录</title>
    <link href="http://yoursite.com/2017/09/26/git%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/09/26/git问题记录/</id>
    <published>2017-09-26T08:51:34.000Z</published>
    <updated>2017-11-19T03:20:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p>
<p>​    问题：</p>
<p>​    error: src refspec feature_elevator does not match any.<br>error: failed to push some refs to ‘git@git.iqdnet.cn:qdp/qdp-guanjia-android.git’    </p>
<p>解决：</p>
<p>​     git push origin HEAD:feature_elevator<br>​     </p>
<p>问题：<br>git checkout commitId 后会创建一个临时分支比如(HEAD detached at 4eb6b46e)如果修改了内容是不能commit的，如果想commit怎么办呢</p>
<p>解决：可以通过 git branch [分支名字] [commitId] 创建一个新的分支然后在新的分支上commit在merge到主分支上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;​    问题：&lt;/p&gt;
&lt;p&gt;​    error: src refspec feature_elevator does not match any.&lt;br&gt;error: failed to push some refs to ‘git@git.
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>charalsTools-MappingRemote</title>
    <link href="http://yoursite.com/2017/09/08/charalsTools-MappingRemote/"/>
    <id>http://yoursite.com/2017/09/08/charalsTools-MappingRemote/</id>
    <published>2017-09-08T03:51:23.000Z</published>
    <updated>2017-09-08T04:05:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题场景：</p>
<p>​    我们app调试的时候为了方便写自测数据，可以使用charals的Mapping Remote的工具来帮我们重定向这样我们就可以使用本机搭建的web测试环境来返回我们想要的自测数据了。</p>
<p>charals  — tools — Mapping Remote</p>
<p>设置如下图：</p>
<p><img src="/2017/09/08/charalsTools-MappingRemote/Snip20170908_1.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题场景：&lt;/p&gt;
&lt;p&gt;​    我们app调试的时候为了方便写自测数据，可以使用charals的Mapping Remote的工具来帮我们重定向这样我们就可以使用本机搭建的web测试环境来返回我们想要的自测数据了。&lt;/p&gt;
&lt;p&gt;charals  — tools — M
    
    </summary>
    
    
      <category term="charals" scheme="http://yoursite.com/tags/charals/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="http://yoursite.com/2017/08/28/docker/"/>
    <id>http://yoursite.com/2017/08/28/docker/</id>
    <published>2017-08-28T15:26:17.000Z</published>
    <updated>2017-08-29T06:18:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>docker 安装</p>
<p>docker 换阿里云源</p>
<p>docker 常用命令</p>
<p>docker 给debian换源</p>
<p>docker 给没有安装vim的机器安装vim过程</p>
<p>docker commit 的使用实例</p>
<p>docker build的使用实例</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;docker 安装&lt;/p&gt;
&lt;p&gt;docker 换阿里云源&lt;/p&gt;
&lt;p&gt;docker 常用命令&lt;/p&gt;
&lt;p&gt;docker 给debian换源&lt;/p&gt;
&lt;p&gt;docker 给没有安装vim的机器安装vim过程&lt;/p&gt;
&lt;p&gt;docker comm
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>github收藏</title>
    <link href="http://yoursite.com/2017/08/22/github%E6%94%B6%E8%97%8F/"/>
    <id>http://yoursite.com/2017/08/22/github收藏/</id>
    <published>2017-08-22T01:38:11.000Z</published>
    <updated>2017-08-22T01:47:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Native"><a href="#React-Native" class="headerlink" title="React-Native"></a>React-Native</h1><p><a href="https://github.com/ReactNativeNews/React-Native-Apps" target="_blank" rel="external"><strong>React-Native-Apps</strong></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React-Native&quot;&gt;&lt;a href=&quot;#React-Native&quot; class=&quot;headerlink&quot; title=&quot;React-Native&quot;&gt;&lt;/a&gt;React-Native&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Re
    
    </summary>
    
    
      <category term="github、开源学习" scheme="http://yoursite.com/tags/github%E3%80%81%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>python之pyc文件</title>
    <link href="http://yoursite.com/2017/08/10/python%E4%B9%8Bpyc%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/08/10/python之pyc文件/</id>
    <published>2017-08-10T08:48:00.000Z</published>
    <updated>2017-08-10T09:27:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>简述Python的运行过程</p>
<p>​    在说这个问题之前，先了解两个概念，PyCodeObject和pyc文件。我们在硬盘上看到的pyc是PyCodeObject序列化后的文件。当python程序运行时，编译的结果则是保存在位于内存中的PyCodeObject中，当Python程序运行结束时，Python解释器将PyCodeObject写回到pyc文件中。当python程序第二次运行的时候，首先程序会在硬盘中寻找pyc文件，如果找到，则直接载入，否则就重复上面的过程。所以我们应该这样定位PyCodeObject和pyc文件，pyc文件其实是PyCodeObject的一种持久化保存方式。</p>
</blockquote>
<ul>
<li>pyc的目的是重用</li>
</ul>
<blockquote>
<p>pyc的过期时间</p>
<p>每次pyc载入内存中之前会先检查一下py文件和pyc文件保存的最后修改日期，如果不一致则重新生成一份pyc文件</p>
</blockquote>
<ul>
<li>扩展阅读：<a href="http://blog.csdn.net/index20001/article/details/73501375" target="_blank" rel="external">运行Python脚本时生成的<strong>pycache</strong>文件夹</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简述Python的运行过程&lt;/p&gt;
&lt;p&gt;​    在说这个问题之前，先了解两个概念，PyCodeObject和pyc文件。我们在硬盘上看到的pyc是PyCodeObject序列化后的文件。当python程序运行时，编译的结果则是保存在位于内存中的
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python编程命名规范</title>
    <link href="http://yoursite.com/2017/08/10/python%E7%BC%96%E7%A8%8B%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2017/08/10/python编程命名规范/</id>
    <published>2017-08-10T03:15:27.000Z</published>
    <updated>2017-08-10T06:27:15.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>项目名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">首字母大写，其余小写单词，若多个单词组合可以添加“_” 下划线增加可读性</div><div class="line">Ui_test</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>包名、模块名</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">全部小写字母</div><div class="line">package、module</div></pre></td></tr></table></figure>
<p> ​<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  首字母大写，其它字母小写，若多个单词时，使用驼峰命名法，UserLogin</div><div class="line">class Login:</div><div class="line">​</div></pre></td></tr></table></figure></p>
</li>
</ol>
<ol>
<li><p>方法名</p>
<p>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">小写单词，多个单词时，用下划线分割单词以增加可读性</div><div class="line">def user_login()</div><div class="line">​</div></pre></td></tr></table></figure></p>
</li>
</ol>
<ol>
<li><p>参数名</p>
<p>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">小写单词</div><div class="line">def user_login(self)</div><div class="line">如果函数的参数名与保留关键字冲突，在参数名前面加一个下划线，比用缩写、错误的拼写要好</div><div class="line">因此&quot;_print&quot; 比”&quot;prnt&quot;好</div><div class="line">​</div></pre></td></tr></table></figure></p>
</li>
</ol>
<ol>
<li><p>普通变量名</p>
<p>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">小写字母，单词之间用_分割或者遵守驼峰原则命名</div><div class="line">month_pay = 2000</div><div class="line">monthPay = 2000</div><div class="line"></div><div class="line">注意：</div><div class="line">1. 不论是类成员变量还是全局变量，均不是用m 或 g 前缀</div><div class="line">2. 私有类成员变量使用单一下划线前缀标识，多定义公开成员，少定义私有成员</div><div class="line">3. 变量名不应该带有类型信息，因为Python是动态类型语言。如iValue、names_list、dict_obj等都是不好的命名</div><div class="line">4. 开头，结尾，一般为python的自由变量，不要以这种方式命名</div><div class="line">5. 以__开头(2个下划线)，是私有实例变量</div><div class="line">​</div></pre></td></tr></table></figure></p>
</li>
</ol>
<pre><code>7. 常量

​<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">常量定义全部为大写，必要的时可用下划线分割单词以增加可读性</div><div class="line">​</div></pre></td></tr></table></figure>
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;项目名&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/p
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 类库引入机制</title>
    <link href="http://yoursite.com/2017/08/09/python-import/"/>
    <id>http://yoursite.com/2017/08/09/python-import/</id>
    <published>2017-08-09T06:48:59.000Z</published>
    <updated>2017-08-09T08:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Python 的两种引入机制</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. relative import</div><div class="line">2. absolute import</div></pre></td></tr></table></figure>
<ol>
<li><p>relative import</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">relative import 也叫作相对引入，在python2.5及以前是默认的引入方法。</div><div class="line">from .string import a</div><div class="line">from ..string import a</div><div class="line">from ...string import a</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python 的两种引入机制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>找房爬虫</title>
    <link href="http://yoursite.com/2017/08/09/%E6%89%BE%E6%88%BF%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2017/08/09/找房爬虫/</id>
    <published>2017-08-09T04:18:25.000Z</published>
    <updated>2017-08-09T04:25:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>scrapy 库介绍</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy 是一个为了爬取网站数据，提取结构性数据而编写的应用框架</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;scrapy 库介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/p
    
    </summary>
    
    
      <category term="python,爬虫" scheme="http://yoursite.com/tags/python-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
